/*
 * {{group.name}}/sensor_ds18b20/main.c
 * Automatically generated file
 */

#include "board.h"
#include "sensor_helpers.h"
#include <dpm/sensors/ds18b20.h>
#include <dpm/sensors/sensor_handler.h>
#include <halm/generic/one_wire.h>
#include <halm/generic/timer_factory.h>
#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*----------------------------------------------------------------------------*/
#define MAX_SENSORS     8
#define SENSOR_PWR_PIN  PIN(0, 3)

struct Context
{
  struct Interface *serial;
  struct Sensor *sensors[MAX_SENSORS];
  DataFormat formats[MAX_SENSORS];
  struct Timer *timer;
  struct Pin led;

  bool automatic;
  bool manual;
  bool queued;
};
/*----------------------------------------------------------------------------*/
static void onSampleRequest(void *);
static void onSearchCompleted(void *);
static void onSensorData(void *, int, const void *, size_t);
static void onSerialEvent(void *);
static void serialHandlerTask(void *);
/*----------------------------------------------------------------------------*/
static void onSampleRequest(void *argument)
{
  struct Context * const context = argument;

  for (size_t i = 0; i < MAX_SENSORS; ++i)
  {
    if (context->sensors[i])
      sensorSample(context->sensors[i]);
  }
}
/*----------------------------------------------------------------------------*/
static void onSearchCompleted(void *argument)
{
  *(bool *)argument = true;
}
/*----------------------------------------------------------------------------*/
static void onSensorData(void *argument, int tag, const void *buffer,
    size_t length)
{
  struct Context * const context = argument;
  const DataFormat * const format = &context->formats[tag];
  int16_t raw;

  assert(length == sizeof(raw));
  assert(format->n * sizeof(int16_t) == length);
  memcpy(&raw, buffer, length);

  size_t count = 0;
  char text[64];

  count += sprintf(text, "%i: ", tag);
  count += printFormattedValues(&raw, format, "%c%i", "%03i", text + count);
  count += sprintf(text + count, " C\r\n");

  pinToggle(context->led);
  ifWrite(context->serial, text, count);
}
/*----------------------------------------------------------------------------*/
static void onSerialEvent(void *argument)
{
  struct Context * const context = argument;

  if (!context->queued)
  {
    if (wqAdd(WQ_DEFAULT, serialHandlerTask, argument) == E_OK)
      context->queued = true;
  }
}
/*----------------------------------------------------------------------------*/
static void serialHandlerTask(void *argument)
{
  static const char HELP_MESSAGE[] =
      "Shortcuts:\r\n"
      "\ta: automatic mode\r\n"
      "\th: show this help message\r\n"
      "\tm: time-triggered mode\r\n"
      "\tr: reset sensor\r\n"
      "\ts: read sample\r\n";

  struct Context * const context = argument;
  char buffer[BOARD_UART_BUFFER];
  size_t count;

  context->queued = false;

  while ((count = ifRead(context->serial, buffer, sizeof(buffer))) > 0)
  {
    for (size_t i = 0; i < count; ++i)
    {
      switch (buffer[i])
      {
        case 'a':
          for (size_t sensor = 0; sensor < MAX_SENSORS; ++sensor)
          {
            if (context->sensors[sensor])
            {
              if (context->automatic)
                sensorStop(context->sensors[sensor]);
              else
                sensorStart(context->sensors[sensor]);
            }
          }
          context->automatic = !context->automatic;
          break;

        case 'h':
          ifWrite(context->serial, HELP_MESSAGE, sizeof(HELP_MESSAGE));
          break;

        case 'm':
          if (context->manual)
            timerDisable(context->timer);
          else
            timerEnable(context->timer);
          context->manual = !context->manual;
          break;

        case 'r':
          for (size_t sensor = 0; sensor < MAX_SENSORS; ++sensor)
          {
            if (context->sensors[sensor])
              sensorReset(context->sensors[sensor]);
          }
          break;

        case 's':
        case ' ':
          for (size_t sensor = 0; sensor < MAX_SENSORS; ++sensor)
          {
            if (context->sensors[sensor])
              sensorSample(context->sensors[sensor]);
          }
          context->automatic = false;
          break;
      }
    }
  }
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const uint32_t SERIAL_RATE = 500000;

  boardSetupClockPll();
  boardSetupDefaultWQ();

  const struct Pin led = pinInit(BOARD_LED_0);
  pinOutput(led, BOARD_LED_INV);
  const struct Pin pwr = pinInit(SENSOR_PWR_PIN);
  pinOutput(pwr, false);

  struct Interface * const serial = boardSetupSerial();
  ifSetParam(serial, IF_RATE, &SERIAL_RATE);

  struct Timer * const sampleTimer = boardSetupTimer();
  timerSetOverflow(sampleTimer, timerGetFrequency(sampleTimer));

  struct Interface * const ow = boardSetupOneWire();

  /* Initialize software timer factory */

  struct Timer * const sensorTimer = boardSetupTimerAux0();
  timerSetOverflow(sensorTimer, timerGetFrequency(sensorTimer) / 1000);

  const struct TimerFactoryConfig factoryConfig = {
      .timer = sensorTimer
  };
  struct TimerFactory * const factory = init(TimerFactory, &factoryConfig);
  assert(factory != NULL);

  /* Initialize sensor handler */

  struct SensorHandler sh;
  shInit(&sh, MAX_SENSORS);
  shSetUpdateWorkQueue(&sh, WQ_DEFAULT);

  /* Find all sensors on the bus and store them in the context structure */

  struct Context context = {
      .serial = serial,
      .sensors = {0},
      .timer = sampleTimer,
      .led = led,
      .automatic = false,
      .manual = false,
      .queued = false
  };
  size_t tag = 0;
  bool event = false;

  ifSetCallback(ow, onSearchCompleted, &event);
  ifSetParam(ow, IF_ONE_WIRE_START_SEARCH, NULL);

  do
  {
    while (!event)
      barrier();
    event = false;

    if (ifGetParam(ow, IF_STATUS, NULL) != E_OK)
      break;

    uint64_t address;

    if (ifGetParam(ow, IF_ADDRESS_64, &address) == E_OK)
    {
      const struct DS18B20Config thermoConfig = {
          .bus = ow,
          .timer = timerFactoryCreate(factory),
          .address = address,
          .resolution = DS18B20_RESOLUTION_DEFAULT
      };
      assert(thermoConfig.timer != NULL);

      struct DS18B20 * const thermo = init(DS18B20, &thermoConfig);
      assert(thermo != NULL);

      context.sensors[tag] = (struct Sensor *)thermo;
      context.formats[tag] = parseDataFormat(sensorGetFormat(thermo));
      shAttach(&sh, thermo, (int)tag);
      sensorReset(thermo);

      char text[64];
      const size_t count = sprintf(text,
          "%02X.%02X.%02X.%02X.%02X.%02X.%02X.%02X: registered as %i\r\n",
          (unsigned int)((address >> 56) & 0xFF),
          (unsigned int)((address >> 48) & 0xFF),
          (unsigned int)((address >> 40) & 0xFF),
          (unsigned int)((address >> 32) & 0xFF),
          (unsigned int)((address >> 24) & 0xFF),
          (unsigned int)((address >> 16) & 0xFF),
          (unsigned int)((address >> 8) & 0xFF),
          (unsigned int)(address & 0xFF),
          (int)tag
      );

      ifWrite(serial, text, count);
      ++tag;
    }
  }
  while (ifSetParam(ow, IF_ONE_WIRE_FIND_NEXT, NULL) == E_OK);

  ifSetCallback(serial, onSerialEvent, &context);
  shSetDataCallback(&sh, onSensorData, &context);
  timerSetCallback(sampleTimer, onSampleRequest, &context);

  /* Start queue handler and software timers */
  timerEnable(sensorTimer);
  wqStart(WQ_DEFAULT);

  return 0;
}
