{% extends 'sensor_base.jinja2' %}

{% block includes %}
/*
 * {{group.name}}/sensor_ds18b20/main.c
 * Automatically generated file
 */

#include <dpm/sensors/ds18b20.h>
#include <halm/generic/one_wire.h>
{% endblock %}

{% block declarations %}
#define SENSOR_COUNT 8

static void onSearchCompleted(void *argument)
{
  *(bool *)argument = true;
}
{% endblock %}

{% block setup %}
  struct Interface * const ow = boardSetupOneWire();
  int tag = 0;
  bool event = false;

  ifSetCallback(ow, onSearchCompleted, &event);
  ifSetParam(ow, IF_ONE_WIRE_START_SEARCH, NULL);

  do
  {
    while (!event)
      barrier();
    event = false;

    if (ifGetParam(ow, IF_STATUS, NULL) != E_OK)
      break;

    uint64_t address;

    if (ifGetParam(ow, IF_ADDRESS_64, &address) == E_OK)
    {
      const struct DS18B20Config thermoConfig = {
          .bus = ow,
          .timer = MAKE_SENSOR_TIMER(),
          .address = address,
          .resolution = DS18B20_RESOLUTION_DEFAULT
      };
      struct DS18B20 * const thermo = init(DS18B20, &thermoConfig);
      assert(thermo != NULL);

      ATTACH_SENSOR(tag, SENSOR_TYPE_THERMO, thermo);

      char text[64];
      const size_t count = sprintf(text,
          "%02X.%02X.%02X.%02X.%02X.%02X.%02X.%02X: registered as %i\r\n",
          (unsigned int)((address >> 56) & 0xFF),
          (unsigned int)((address >> 48) & 0xFF),
          (unsigned int)((address >> 40) & 0xFF),
          (unsigned int)((address >> 32) & 0xFF),
          (unsigned int)((address >> 24) & 0xFF),
          (unsigned int)((address >> 16) & 0xFF),
          (unsigned int)((address >> 8) & 0xFF),
          (unsigned int)(address & 0xFF),
          (int)tag
      );

      ifWrite(serial, text, count);
      ++tag;
    }
  }
  while (ifSetParam(ow, IF_ONE_WIRE_FIND_NEXT, NULL) == E_OK);
{% endblock %}
