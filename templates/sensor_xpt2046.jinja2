/*
 * {{group.name}}/sensor_xpt2046/main.c
 * Automatically generated file
 */

#include "board.h"
#include "sensor_helpers.h"
#include <dpm/sensors/sensor_handler.h>
#include <dpm/sensors/xpt2046.h>
#include <halm/timer.h>
#include <xcore/interface.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
/*----------------------------------------------------------------------------*/
struct Context
{
  struct Interface *serial;
  struct Sensor *sensor;
  DataFormat format;
  struct Timer *timer;
  struct Pin led;

  bool automatic;
  bool manual;
  bool queued;
};
/*----------------------------------------------------------------------------*/
static void onSampleRequest(void *);
static void onSensorData(void *, int, const void *, size_t);
static void onSerialEvent(void *);
static void serialHandlerTask(void *);
/*----------------------------------------------------------------------------*/
static void onSampleRequest(void *argument)
{
  struct Context * const context = argument;
  sensorSample(context->sensor);
}
/*----------------------------------------------------------------------------*/
static void onSensorData(void *argument, int tag __attribute__((unused)),
    const void *buffer, size_t length)
{
  struct Context * const context = argument;
  const DataFormat * const format = &context->format;
  int16_t raw[3];

  assert(length == sizeof(raw));
  assert(format->n * sizeof(int16_t) == length);
  memcpy(&raw, buffer, length);

  size_t count = 0;
  char text[64];

  count += printFormattedValues(raw, format, false, 0, text + count);
  count += sprintf(text + count, "\r\n");

  pinToggle(context->led);
  ifWrite(context->serial, text, count);
}
/*----------------------------------------------------------------------------*/
static void onSerialEvent(void *argument)
{
  struct Context * const context = argument;

  if (!context->queued)
  {
    if (wqAdd(WQ_DEFAULT, serialHandlerTask, argument) == E_OK)
      context->queued = true;
  }
}
/*----------------------------------------------------------------------------*/
static void serialHandlerTask(void *argument)
{
static const char HELP_MESSAGE[] =
      "Shortcuts:\r\n"
      "\ta: automatic mode\r\n"
      "\th: show this help message\r\n"
      "\tm: time-triggered mode\r\n"
      "\ts: read sample\r\n";

  struct Context * const context = argument;
  char buffer[BOARD_UART_BUFFER];
  size_t count;

  context->queued = false;

  while ((count = ifRead(context->serial, buffer, sizeof(buffer))) > 0)
  {
    for (size_t i = 0; i < count; ++i)
    {
      switch (buffer[i])
      {
        case 'a':
          if (context->automatic)
            sensorStop(context->sensor);
          else
            sensorStart(context->sensor);
          context->automatic = !context->automatic;
          break;

        case 'h':
          ifWrite(context->serial, HELP_MESSAGE, sizeof(HELP_MESSAGE));
          break;

        case 'm':
          if (context->manual)
            timerDisable(context->timer);
          else
            timerEnable(context->timer);
          context->manual = !context->manual;
          break;

        case 's':
        case ' ':
          sensorSample(context->sensor);
          context->automatic = false;
          break;
      }
    }
  }
}
/*----------------------------------------------------------------------------*/
int main(void)
{
  static const uint32_t SERIAL_RATE = 500000;

  boardSetupClockPll();
  boardSetupDefaultWQ();

  const struct Pin led = pinInit(BOARD_LED_0);
  pinOutput(led, BOARD_LED_INV);

  struct Interface * const serial = boardSetupSerial();
  ifSetParam(serial, IF_RATE, &SERIAL_RATE);

  struct Timer * const sampleTimer = boardSetupTimer();
  timerSetOverflow(sampleTimer, timerGetFrequency(sampleTimer) / 2);

  struct Timer * const sensorTimer = boardSetupTimerAux0();

  struct Interrupt * const event =
      boardSetupTouchEvent(INPUT_FALLING, PIN_PULLUP);
  struct Interface * const spi = boardSetupSpiDisplay();

  const struct XPT2046Config touchConfig = {
      .bus = spi,
      .event = event,
      .timer = sensorTimer,
      .rate = 100000,
      .cs = BOARD_TOUCH_CS,
      .threshold = 100,
      .x = 240,
      .y = 320
  };
  struct XPT2046 * const touch = init(XPT2046, &touchConfig);
  assert(touch != NULL);
  xpt2046ResetCalibration(touch);

  struct SensorHandler sh;
  shInit(&sh, 4);
  shSetUpdateWorkQueue(&sh, WQ_DEFAULT);

  shAttach(&sh, touch, 0);
  sensorReset(touch);

  struct Context context = {
      .serial = serial,
      .sensor = (struct Sensor *)touch,
      .format = parseDataFormat(sensorGetFormat(touch)),
      .timer = sampleTimer,
      .led = led,
      .automatic = false,
      .manual = false,
      .queued = false
  };

  ifSetCallback(serial, onSerialEvent, &context);
  shSetDataCallback(&sh, onSensorData, &context);
  timerSetCallback(sampleTimer, onSampleRequest, &context);

  /* Start Work Queue */
  wqStart(WQ_DEFAULT);

  return 0;
}
