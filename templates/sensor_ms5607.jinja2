{% extends 'sensor_base.jinja2' %}

{% block includes %}
/*
 * {{group.name}}/sensor_ms5607/main.c
 * Automatically generated file
 */

#include <dpm/sensors/ms56xx.h>
{% endblock %}

{% block declarations %}
enum
{
  SENSOR_TAG_BARO,
  SENSOR_TAG_THERMO,

  SENSOR_COUNT
};
{% endblock %}

{% block setup %}
{% if config.USE_SPI is defined and config.USE_SPI %}
  struct Interface * const spi = boardSetupSpi();

  const struct MS56XXConfig baroConfig = {
      .bus = spi,
      .timer = MAKE_SENSOR_TIMER(),
      .address = 0,
      .rate = 400000,
      .cs = BOARD_SENSOR_CS,
      .oversampling = MS56XX_OVERSAMPLING_DEFAULT,
      .subtype = MS56XX_TYPE_5607
  };
{% else %}
  struct Interface * const i2c = boardSetupI2C();
  ENABLE_I2C_RECOVERY(i2c);

  const struct MS56XXConfig baroConfig = {
      .bus = i2c,
      .timer = MAKE_SENSOR_TIMER(),
      .address = 0x77,
      .rate = 400000,
      .cs = 0,
      .oversampling = MS56XX_OVERSAMPLING_DEFAULT,
      .subtype = MS56XX_TYPE_5607
  };
{% endif %}
  struct MS56XX * const baro = init(MS56XX, &baroConfig);
  assert(baro != NULL);

  ATTACH_SENSOR(SENSOR_TAG_BARO, SENSOR_TYPE_BARO, baro);
  ATTACH_SENSOR(SENSOR_TAG_THERMO, SENSOR_TYPE_THERMO,
      ms56xxMakeThermometer(baro));
{% endblock %}
